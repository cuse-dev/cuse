// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from '@hey-api/client-fetch';
import type {
  EditorViewFileData,
  EditorViewFileError,
  EditorViewFileResponse,
  EditorCreateFileData,
  EditorCreateFileError,
  EditorCreateFileResponse,
  EditorReplaceStringData,
  EditorReplaceStringError,
  EditorReplaceStringResponse,
  EditorInsertTextData,
  EditorInsertTextError,
  EditorInsertTextResponse,
  ComputerTakeScreenshotData,
  ComputerTakeScreenshotError,
  ComputerTakeScreenshotResponse,
  ComputerPressKeyData,
  ComputerPressKeyError,
  ComputerPressKeyResponse,
  ComputerTypeTextData,
  ComputerTypeTextError,
  ComputerTypeTextResponse,
  ComputerMoveCursorData,
  ComputerMoveCursorError,
  ComputerMoveCursorResponse,
  ComputerLeftClickData,
  ComputerLeftClickError,
  ComputerLeftClickResponse,
  ComputerRightClickData,
  ComputerRightClickError,
  ComputerRightClickResponse,
  ComputerMiddleClickData,
  ComputerMiddleClickError,
  ComputerMiddleClickResponse,
  ComputerDoubleClickData,
  ComputerDoubleClickError,
  ComputerDoubleClickResponse,
  ComputerGetCursorPositionData,
  ComputerGetCursorPositionError,
  ComputerGetCursorPositionResponse,
  BashExecuteCommandData,
  BashExecuteCommandError,
  BashExecuteCommandResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * View a file
 * View the contents of a file, optionally specifying a line range.
 */
export const editorViewFile = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<EditorViewFileData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    EditorViewFileResponse,
    EditorViewFileError,
    ThrowOnError
  >({
    ...options,
    url: '/editor/view',
  });
};

/**
 * Create a file
 * Create a new file with optional content.
 */
export const editorCreateFile = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<EditorCreateFileData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    EditorCreateFileResponse,
    EditorCreateFileError,
    ThrowOnError
  >({
    ...options,
    url: '/editor/create',
  });
};

/**
 * Replace string in a file
 * Replace occurrences of a string in a file with another string.
 */
export const editorReplaceString = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<EditorReplaceStringData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    EditorReplaceStringResponse,
    EditorReplaceStringError,
    ThrowOnError
  >({
    ...options,
    url: '/editor/str-replace',
  });
};

/**
 * Insert text into a file
 * Insert text into a specific line of a file.
 */
export const editorInsertText = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<EditorInsertTextData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    EditorInsertTextResponse,
    EditorInsertTextError,
    ThrowOnError
  >({
    ...options,
    url: '/editor/insert',
  });
};

/**
 * Undo the last edit
 * Currently not implemented.
 */
export const editorUndoLastEdit = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/editor/undo-edit',
  });
};

/**
 * Take a screenshot
 * Captures a screenshot of the specified display and returns it as a base64-encoded string.
 */
export const computerTakeScreenshot = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerTakeScreenshotData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ComputerTakeScreenshotResponse,
    ComputerTakeScreenshotError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/screenshot',
  });
};

/**
 * Press key
 * Presses a key on the specified display.
 */
export const computerPressKey = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ComputerPressKeyData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerPressKeyResponse,
    ComputerPressKeyError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/key',
  });
};

/**
 * Type text
 * Types text on the specified display.
 */
export const computerTypeText = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ComputerTypeTextData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerTypeTextResponse,
    ComputerTypeTextError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/type',
  });
};

/**
 * Move mouse cursor
 * Moves the mouse cursor to the specified coordinates on the given display.
 */
export const computerMoveCursor = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ComputerMoveCursorData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerMoveCursorResponse,
    ComputerMoveCursorError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/mouse-move',
  });
};

/**
 * Perform left mouse click
 * Performs a left mouse click on the specified display.
 */
export const computerLeftClick = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerLeftClickData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerLeftClickResponse,
    ComputerLeftClickError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/left-click',
  });
};

/**
 * Perform right mouse click
 * Performs a right mouse click on the specified display.
 */
export const computerRightClick = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerRightClickData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerRightClickResponse,
    ComputerRightClickError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/right-click',
  });
};

/**
 * Perform middle mouse click
 * Performs a middle mouse click on the specified display.
 */
export const computerMiddleClick = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerMiddleClickData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerMiddleClickResponse,
    ComputerMiddleClickError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/middle-click',
  });
};

/**
 * Perform double click
 * Performs a double click with the left mouse button on the specified display.
 */
export const computerDoubleClick = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerDoubleClickData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ComputerDoubleClickResponse,
    ComputerDoubleClickError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/double-click',
  });
};

/**
 * Get cursor position
 * Gets the current position of the mouse cursor on the specified display.
 */
export const computerGetCursorPosition = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ComputerGetCursorPositionData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ComputerGetCursorPositionResponse,
    ComputerGetCursorPositionError,
    ThrowOnError
  >({
    ...options,
    url: '/computer/cursor-position',
  });
};

/**
 * Execute Bash Command
 * Executes a given bash command and returns the output.
 */
export const bashExecuteCommand = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<BashExecuteCommandData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    BashExecuteCommandResponse,
    BashExecuteCommandError,
    ThrowOnError
  >({
    ...options,
    url: '/bash/command',
  });
};

/**
 * Restart System
 * Restarts the system. Currently, this endpoint is not implemented.
 */
export const bashRestartSystem = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/bash/restart',
  });
};
