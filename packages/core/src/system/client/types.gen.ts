// This file is auto-generated by @hey-api/openapi-ts

export type AuthElement = {
    type: string;
    coordinates: {
        [key: string]: (number);
    };
};

export type AuthenticateParams = {
    /**
     * Service identifier to authenticate
     */
    service: string;
    /**
     * Authentication elements to verify
     */
    authElements: Array<AuthElement>;
};

export type CommandParams = {
    /**
     * Shell command to execute
     */
    command: string;
};

export type CommandResponse = {
    /**
     * Command output if available
     */
    output?: (string | null);
    /**
     * Process ID if running in background
     */
    process_id?: (number | null);
    /**
     * Command status: 'completed' or 'background'
     */
    status?: string;
};

export type CreateParams = {
    /**
     * File path to create
     */
    path: string;
    /**
     * Initial file contents
     */
    file_text?: (string | null);
};

export type DeleteItemParams = {
    /**
     * Service identifier to delete
     */
    service: string;
};

export type DisplayRequest = {
    /**
     * Display number to target
     */
    display_num?: number;
};

export type FileInfo = {
    /**
     * File or directory name
     */
    name: string;
    /**
     * Full path to the file or directory
     */
    path: string;
    /**
     * Type of entry: 'file' or 'directory'
     */
    type: string;
    /**
     * Size in bytes
     */
    size: number;
    /**
     * Last modification time
     */
    modified_time: string;
    /**
     * Whether the file/directory is hidden
     */
    is_hidden: boolean;
    /**
     * File extension if applicable
     */
    extension?: (string | null);
};

export type HotkeyRequest = {
    /**
     * List of keys to press simultaneously
     */
    keys: Array<(string)>;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImageLocateRequest = {
    /**
     * Path to the image file to locate on screen
     */
    image_path: string;
    /**
     * Confidence threshold for image matching (0.0 to 1.0)
     */
    confidence?: number;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type InsertParams = {
    /**
     * File path to modify
     */
    path: string;
    /**
     * Text to insert
     */
    text: string;
    /**
     * Line number to insert at (1-based)
     */
    insert_line?: (number | null);
};

export type KeychainItem = {
    username?: (string | null);
    password?: (string | null);
    token?: (string | null);
    email?: (string | null);
    phone?: (string | null);
    otp?: (string | null);
};

export type KeyPressRequest = {
    /**
     * Key to press (e.g., 'a', 'enter', 'shift', 'ctrl', 'alt', etc.)
     */
    key: string;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type ListDirectoryParams = {
    /**
     * Directory path to list
     */
    path: string;
    /**
     * Whether to include hidden files/directories
     */
    include_hidden?: boolean;
    /**
     * Glob pattern to filter results
     */
    pattern?: (string | null);
};

export type MouseMoveRequest = {
    /**
     * X coordinate to move the cursor to
     */
    x: number;
    /**
     * Y coordinate to move the cursor to
     */
    y: number;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type PixelColorRequest = {
    /**
     * X coordinate of the pixel
     */
    x: number;
    /**
     * Y coordinate of the pixel
     */
    y: number;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type ProcessInfo = {
    /**
     * Process ID
     */
    pid: number;
    /**
     * Command that was executed
     */
    command: string;
    /**
     * Current status of the process
     */
    status: string;
    /**
     * Process output if available
     */
    output?: (string | null);
};

export type RestartParams = {
    [key: string]: unknown;
};

export type ScrollRequest = {
    /**
     * Number of clicks to scroll. Positive numbers scroll up, negative numbers scroll down
     */
    clicks: number;
    /**
     * Display number to target
     */
    display_num?: number;
};

export type SearchParams = {
    /**
     * Root directory to start search from
     */
    root_path: string;
    /**
     * Glob pattern to search for
     */
    pattern: string;
    /**
     * Maximum number of results to return
     */
    max_results?: number;
    /**
     * Whether to include hidden files/directories
     */
    include_hidden?: boolean;
};

export type SetItemParams = {
    /**
     * Service identifier
     */
    service: string;
    /**
     * Keychain item to store
     */
    item: KeychainItem;
};

export type StrReplaceParams = {
    /**
     * File path to modify
     */
    path: string;
    /**
     * String to replace
     */
    old_str: string;
    /**
     * Replacement string
     */
    new_str: string;
};

export type TreeParams = {
    /**
     * Root directory path
     */
    path: string;
    /**
     * Maximum depth to traverse
     */
    max_depth?: number;
    /**
     * Whether to include hidden files/directories
     */
    include_hidden?: boolean;
    /**
     * Glob pattern to filter results
     */
    pattern?: (string | null);
};

export type TypeTextRequest = {
    /**
     * Text to type
     */
    text: string;
    /**
     * Display number to target
     */
    display_num?: number;
    /**
     * Delay between keystrokes in milliseconds
     */
    typing_delay?: number;
    /**
     * Number of characters to type at once
     */
    typing_group_size?: number;
};

export type UndoEditParams = {
    /**
     * File path to undo changes
     */
    path: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ViewParams = {
    /**
     * File path to view
     */
    path: string;
    /**
     * Line range to view [start, end]
     */
    view_range?: (Array<(number)> | null);
};

export type MoveMouseData = {
    body: MouseMoveRequest;
};

export type MoveMouseResponse = (void);

export type MoveMouseError = (HTTPValidationError | unknown);

export type LeftClickData = {
    body: DisplayRequest;
};

export type LeftClickResponse = (void);

export type LeftClickError = (HTTPValidationError | unknown);

export type RightClickData = {
    body: DisplayRequest;
};

export type RightClickResponse = (void);

export type RightClickError = (HTTPValidationError | unknown);

export type MiddleClickData = {
    body: DisplayRequest;
};

export type MiddleClickResponse = (void);

export type MiddleClickError = (HTTPValidationError | unknown);

export type DoubleClickData = {
    body: DisplayRequest;
};

export type DoubleClickResponse = (void);

export type DoubleClickError = (HTTPValidationError | unknown);

export type DragMouseData = {
    body: MouseMoveRequest;
};

export type DragMouseResponse = (void);

export type DragMouseError = (HTTPValidationError | unknown);

export type GetMousePositionData = {
    query?: {
        display_num?: number;
    };
};

export type GetMousePositionResponse = ({
    [key: string]: (number);
});

export type GetMousePositionError = (HTTPValidationError | unknown);

export type ScrollMouseData = {
    body: ScrollRequest;
};

export type ScrollMouseResponse = (void);

export type ScrollMouseError = (HTTPValidationError | unknown);

export type PressKeyData = {
    body: KeyPressRequest;
};

export type PressKeyResponse = (unknown);

export type PressKeyError = (HTTPValidationError | unknown);

export type TypeTextData = {
    body: TypeTextRequest;
};

export type TypeTextResponse = (unknown);

export type TypeTextError = (HTTPValidationError | unknown);

export type PressHotkeyData = {
    body: HotkeyRequest;
};

export type PressHotkeyResponse = (unknown);

export type PressHotkeyError = (HTTPValidationError | unknown);

export type HoldKeyData = {
    body: KeyPressRequest;
};

export type HoldKeyResponse = (unknown);

export type HoldKeyError = (HTTPValidationError | unknown);

export type ReleaseKeyData = {
    body: KeyPressRequest;
};

export type ReleaseKeyResponse = (unknown);

export type ReleaseKeyError = (HTTPValidationError | unknown);

export type TakeScreenshotData = {
    query?: {
        display_num?: number;
    };
};

export type TakeScreenshotResponse = (unknown);

export type TakeScreenshotError = (HTTPValidationError | unknown);

export type GetScreenSizeData = {
    query?: {
        display_num?: number;
    };
};

export type GetScreenSizeResponse = ({
    [key: string]: (number);
});

export type GetScreenSizeError = (HTTPValidationError | unknown);

export type LocateImageData = {
    body: ImageLocateRequest;
};

export type LocateImageResponse = (({
    [key: string]: (number);
} | null));

export type LocateImageError = (HTTPValidationError | unknown);

export type GetPixelColorData = {
    body: PixelColorRequest;
};

export type GetPixelColorResponse = ([
    number,
    number,
    number
]);

export type GetPixelColorError = (HTTPValidationError | unknown);

export type ExecuteCommandData = {
    body: CommandParams;
};

export type ExecuteCommandResponse = (CommandResponse);

export type ExecuteCommandError = (HTTPValidationError | unknown);

export type GetProcessOutputData = {
    path: {
        pid: number;
    };
};

export type GetProcessOutputResponse = (CommandResponse);

export type GetProcessOutputError = (unknown | HTTPValidationError);

export type TerminateProcessData = {
    path: {
        pid: number;
    };
};

export type TerminateProcessResponse = (void);

export type TerminateProcessError = (unknown | HTTPValidationError);

export type RestartSystemData = {
    body: RestartParams;
};

export type RestartSystemResponse = (void);

export type RestartSystemError = (HTTPValidationError | unknown);

export type ListManagedProcessesResponse = (Array<ProcessInfo>);

export type ListManagedProcessesError = (unknown);

export type ViewFileData = {
    body: ViewParams;
};

export type ViewFileResponse = (string);

export type ViewFileError = (unknown | HTTPValidationError);

export type CreateFileData = {
    body: CreateParams;
};

export type CreateFileResponse = (void);

export type CreateFileError = (unknown | HTTPValidationError);

export type ReplaceStringData = {
    body: StrReplaceParams;
};

export type ReplaceStringResponse = (void);

export type ReplaceStringError = (unknown | HTTPValidationError);

export type InsertTextData = {
    body: InsertParams;
};

export type InsertTextResponse = (void);

export type InsertTextError = (unknown | HTTPValidationError);

export type UndoEditData = {
    body: UndoEditParams;
};

export type UndoEditResponse = (void);

export type UndoEditError = (unknown | HTTPValidationError);

export type SetKeychainItemData = {
    body: SetItemParams;
};

export type SetKeychainItemResponse = (void);

export type SetKeychainItemError = (HTTPValidationError | unknown);

export type DeleteKeychainItemData = {
    body: DeleteItemParams;
};

export type DeleteKeychainItemResponse = (void);

export type DeleteKeychainItemError = (HTTPValidationError | unknown);

export type ListKeychainServicesResponse = (Array<(string)>);

export type ListKeychainServicesError = (unknown);

export type AuthenticateServiceData = {
    body: AuthenticateParams;
};

export type AuthenticateServiceResponse = (boolean);

export type AuthenticateServiceError = (unknown | HTTPValidationError);

export type ListDirectoryData = {
    body: ListDirectoryParams;
};

export type ListDirectoryResponse = (Array<FileInfo>);

export type ListDirectoryError = (unknown | HTTPValidationError);

export type GetDirectoryTreeData = {
    body: TreeParams;
};

export type GetDirectoryTreeResponse = ({
    [key: string]: unknown;
});

export type GetDirectoryTreeError = (unknown | HTTPValidationError);

export type SearchFilesData = {
    body: SearchParams;
};

export type SearchFilesResponse = (Array<FileInfo>);

export type SearchFilesError = (unknown | HTTPValidationError);

export type GetPathInfoData = {
    path: {
        path: string;
    };
};

export type GetPathInfoResponse = (FileInfo);

export type GetPathInfoError = (unknown | HTTPValidationError);

export type RootGetResponse = (unknown);

export type RootGetError = unknown;

export type ApiRootApiGetResponse = (unknown);

export type ApiRootApiGetError = unknown;