// This file is auto-generated by @hey-api/openapi-ts

export type CommandParams = {
    /**
     * Bash command to execute.
     */
    command: string;
};

export type CommandResponse = {
    /**
     * Command output if completed.
     */
    output?: (string) | null;
    /**
     * Process ID if running in background.
     */
    process_id?: (number) | null;
    /**
     * Status of the command execution.
     */
    status: 'completed' | 'background';
};

/**
 * Status of the command execution.
 */
export type status = 'completed' | 'background';

export type CreateParams = {
    /**
     * Path to the file to be created.
     */
    path: string;
    /**
     * Optional content to place in the file.
     */
    file_text?: (string) | null;
};

export type HTTPError = {
    detail?: string;
};

export type InsertParams = {
    /**
     * Path to the file.
     */
    path: string;
    /**
     * The text to insert.
     */
    text: string;
    /**
     * Line number at which to insert text.
     */
    insert_line?: (number) | null;
};

/**
 * Display number to operate on, defaults to 1.
 */
export type ParameterDisplayNumber = number;

export type ProcessInfo = {
    /**
     * Process ID
     */
    pid: number;
    /**
     * Command that started the process
     */
    command: string;
    /**
     * Current status of the process
     */
    status: string;
    /**
     * CPU usage percentage
     */
    cpu_percent?: (number) | null;
    /**
     * Memory usage percentage
     */
    memory_percent?: (number) | null;
    /**
     * Process creation time (Unix timestamp)
     */
    create_time?: (number) | null;
};

export type ProcessListResponse = {
    /**
     * List of processes
     */
    processes: Array<ProcessInfo>;
};

/**
 * No parameters needed for restart
 */
export type RestartParams = {
    [key: string]: unknown;
};

export type StrReplaceParams = {
    /**
     * Path to the file.
     */
    path: string;
    /**
     * String to replace.
     */
    old_str: string;
    /**
     * Replacement string.
     */
    new_str: string;
};

export type UndoEditParams = {
    /**
     * Path to the file.
     */
    path: string;
};

export type ViewParams = {
    /**
     * Path to the file to be viewed.
     */
    path: string;
    /**
     * Start and end lines (inclusive).
     */
    view_range?: [
        number,
        number
    ] | null;
};

export type ComputerTakeScreenshotData = {
    query?: {
        /**
         * Display number to operate on, defaults to 1.
         */
        display_num?: number;
    };
};

export type ComputerTakeScreenshotResponse = ((Blob | File));

export type ComputerTakeScreenshotError = (HTTPError);

export type ComputerPressKeyData = {
    body: {
        /**
         * Key to press.
         */
        key: string;
        /**
         * Display number on which to press the key.
         */
        display_num?: number;
    };
};

export type ComputerPressKeyResponse = (void);

export type ComputerPressKeyError = (HTTPError);

export type ComputerTypeTextData = {
    body: {
        /**
         * Text to type.
         */
        text: string;
        /**
         * Display number on which to type text.
         */
        display_num?: number;
        /**
         * Delay (in milliseconds) between typed characters.
         */
        typing_delay?: number;
        /**
         * Number of characters typed between delays.
         */
        typing_group_size?: number;
    };
};

export type ComputerTypeTextResponse = (void);

export type ComputerTypeTextError = (HTTPError);

export type ComputerMoveCursorData = {
    body: {
        /**
         * X coordinate.
         */
        x: number;
        /**
         * Y coordinate.
         */
        y: number;
        /**
         * Display number on which to move the mouse.
         */
        display_num?: number;
    };
};

export type ComputerMoveCursorResponse = (void);

export type ComputerMoveCursorError = (HTTPError);

export type ComputerLeftClickData = {
    body?: {
        /**
         * Display number on which to perform the click.
         */
        display_num?: number;
    };
};

export type ComputerLeftClickResponse = (void);

export type ComputerLeftClickError = (HTTPError);

export type ComputerRightClickData = {
    body?: {
        /**
         * Display number on which to perform the click.
         */
        display_num?: number;
    };
};

export type ComputerRightClickResponse = (void);

export type ComputerRightClickError = (HTTPError);

export type ComputerMiddleClickData = {
    body?: {
        /**
         * Display number on which to perform the click.
         */
        display_num?: number;
    };
};

export type ComputerMiddleClickResponse = (void);

export type ComputerMiddleClickError = (HTTPError);

export type ComputerDoubleClickData = {
    body?: {
        /**
         * Display number on which to perform the double click.
         */
        display_num?: number;
    };
};

export type ComputerDoubleClickResponse = (void);

export type ComputerDoubleClickError = (HTTPError);

export type ComputerLeftClickDragData = {
    body: {
        /**
         * Target X coordinate to drag to.
         */
        x: number;
        /**
         * Target Y coordinate to drag to.
         */
        y: number;
        /**
         * Display number on which to perform the drag operation.
         */
        display_num?: number;
    };
};

export type ComputerLeftClickDragResponse = (void);

export type ComputerLeftClickDragError = (HTTPError);

export type ComputerGetCursorPositionData = {
    query?: {
        /**
         * Display number to get the cursor position from.
         */
        display_num?: number;
    };
};

export type ComputerGetCursorPositionResponse = ({
    x?: number;
    y?: number;
});

export type ComputerGetCursorPositionError = (HTTPError);

export type EditorViewFileData = {
    body: ViewParams;
};

export type EditorViewFileResponse = (string);

export type EditorViewFileError = (unknown | HTTPError);

export type EditorCreateFileData = {
    body: CreateParams;
};

export type EditorCreateFileResponse = (void);

export type EditorCreateFileError = (unknown | HTTPError);

export type EditorReplaceStringData = {
    body: StrReplaceParams;
};

export type EditorReplaceStringResponse = (void);

export type EditorReplaceStringError = (unknown | HTTPError);

export type EditorInsertTextData = {
    body: InsertParams;
};

export type EditorInsertTextResponse = (void);

export type EditorInsertTextError = (unknown | HTTPError);

export type EditorUndoLastEditData = {
    body: UndoEditParams;
};

export type BashExecuteCommandData = {
    body: CommandParams;
};

export type BashExecuteCommandResponse = (CommandResponse);

export type BashExecuteCommandError = (HTTPError);

export type BashGetProcessOutputData = {
    path: {
        /**
         * Process ID
         */
        pid: number;
    };
};

export type BashGetProcessOutputResponse = (CommandResponse);

export type BashGetProcessOutputError = (unknown | HTTPError);

export type BashTerminateProcessData = {
    path: {
        /**
         * Process ID
         */
        pid: number;
    };
};

export type BashTerminateProcessResponse = (void);

export type BashTerminateProcessError = (unknown | HTTPError);

export type BashListManagedProcessesResponse = (ProcessListResponse);

export type BashListManagedProcessesError = (HTTPError);

export type BashListSystemProcessesResponse = (ProcessListResponse);

export type BashListSystemProcessesError = (HTTPError);

export type BashRestartSystemData = {
    body: RestartParams;
};

export type BashRestartSystemResponse = (void);

export type BashRestartSystemError = (HTTPError);