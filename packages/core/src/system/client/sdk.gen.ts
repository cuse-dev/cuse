// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { ComputerTakeScreenshotData, ComputerTakeScreenshotError, ComputerTakeScreenshotResponse, ComputerPressKeyData, ComputerPressKeyError, ComputerPressKeyResponse, ComputerTypeTextData, ComputerTypeTextError, ComputerTypeTextResponse, ComputerMoveCursorData, ComputerMoveCursorError, ComputerMoveCursorResponse, ComputerLeftClickData, ComputerLeftClickError, ComputerLeftClickResponse, ComputerRightClickData, ComputerRightClickError, ComputerRightClickResponse, ComputerMiddleClickData, ComputerMiddleClickError, ComputerMiddleClickResponse, ComputerDoubleClickData, ComputerDoubleClickError, ComputerDoubleClickResponse, ComputerLeftClickDragData, ComputerLeftClickDragError, ComputerLeftClickDragResponse, ComputerGetCursorPositionData, ComputerGetCursorPositionError, ComputerGetCursorPositionResponse, EditorViewFileData, EditorViewFileError, EditorViewFileResponse, EditorCreateFileData, EditorCreateFileError, EditorCreateFileResponse, EditorReplaceStringData, EditorReplaceStringError, EditorReplaceStringResponse, EditorInsertTextData, EditorInsertTextError, EditorInsertTextResponse, EditorUndoLastEditData, BashExecuteCommandData, BashExecuteCommandError, BashExecuteCommandResponse, BashGetProcessOutputData, BashGetProcessOutputError, BashGetProcessOutputResponse, BashTerminateProcessData, BashTerminateProcessError, BashTerminateProcessResponse, BashListManagedProcessesError, BashListManagedProcessesResponse, BashListSystemProcessesError, BashListSystemProcessesResponse, BashRestartSystemData, BashRestartSystemError, BashRestartSystemResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Take a Screenshot
 * Captures and returns a screenshot from the specified display as a PNG file.
 */
export const computerTakeScreenshot = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerTakeScreenshotData, ThrowOnError>) => {
    return (options?.client ?? client).get<ComputerTakeScreenshotResponse, ComputerTakeScreenshotError, ThrowOnError>({
        ...options,
        url: '/computer/screenshot'
    });
};

/**
 * Press key
 * Presses a key on the specified display.
 */
export const computerPressKey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ComputerPressKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerPressKeyResponse, ComputerPressKeyError, ThrowOnError>({
        ...options,
        url: '/computer/key'
    });
};

/**
 * Type text
 * Types text on the specified display.
 */
export const computerTypeText = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ComputerTypeTextData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerTypeTextResponse, ComputerTypeTextError, ThrowOnError>({
        ...options,
        url: '/computer/type'
    });
};

/**
 * Move mouse cursor
 * Moves the mouse cursor to the specified coordinates on the given display.
 */
export const computerMoveCursor = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ComputerMoveCursorData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerMoveCursorResponse, ComputerMoveCursorError, ThrowOnError>({
        ...options,
        url: '/computer/mouse-move'
    });
};

/**
 * Perform left mouse click
 * Performs a left mouse click on the specified display.
 */
export const computerLeftClick = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerLeftClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerLeftClickResponse, ComputerLeftClickError, ThrowOnError>({
        ...options,
        url: '/computer/left-click'
    });
};

/**
 * Perform right mouse click
 * Performs a right mouse click on the specified display.
 */
export const computerRightClick = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerRightClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerRightClickResponse, ComputerRightClickError, ThrowOnError>({
        ...options,
        url: '/computer/right-click'
    });
};

/**
 * Perform middle mouse click
 * Performs a middle mouse click on the specified display.
 */
export const computerMiddleClick = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerMiddleClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerMiddleClickResponse, ComputerMiddleClickError, ThrowOnError>({
        ...options,
        url: '/computer/middle-click'
    });
};

/**
 * Perform double click
 * Performs a double click with the left mouse button on the specified display.
 */
export const computerDoubleClick = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerDoubleClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerDoubleClickResponse, ComputerDoubleClickError, ThrowOnError>({
        ...options,
        url: '/computer/double-click'
    });
};

/**
 * Perform left click and drag
 * Performs a left click and drag operation to the specified coordinates on the given display.
 */
export const computerLeftClickDrag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ComputerLeftClickDragData, ThrowOnError>) => {
    return (options?.client ?? client).post<ComputerLeftClickDragResponse, ComputerLeftClickDragError, ThrowOnError>({
        ...options,
        url: '/computer/left-click-drag'
    });
};

/**
 * Get cursor position
 * Gets the current position of the mouse cursor on the specified display.
 */
export const computerGetCursorPosition = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ComputerGetCursorPositionData, ThrowOnError>) => {
    return (options?.client ?? client).get<ComputerGetCursorPositionResponse, ComputerGetCursorPositionError, ThrowOnError>({
        ...options,
        url: '/computer/cursor-position'
    });
};

/**
 * View a file
 * View the contents of a file, optionally specifying a line range.
 */
export const editorViewFile = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditorViewFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<EditorViewFileResponse, EditorViewFileError, ThrowOnError>({
        ...options,
        url: '/editor/view'
    });
};

/**
 * Create a file
 * Create a new file with optional content.
 */
export const editorCreateFile = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditorCreateFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<EditorCreateFileResponse, EditorCreateFileError, ThrowOnError>({
        ...options,
        url: '/editor/create'
    });
};

/**
 * Replace string in a file
 * Replace occurrences of a string in a file with another string.
 */
export const editorReplaceString = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditorReplaceStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<EditorReplaceStringResponse, EditorReplaceStringError, ThrowOnError>({
        ...options,
        url: '/editor/str-replace'
    });
};

/**
 * Insert text into a file
 * Insert text into a specific line of a file.
 */
export const editorInsertText = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditorInsertTextData, ThrowOnError>) => {
    return (options?.client ?? client).post<EditorInsertTextResponse, EditorInsertTextError, ThrowOnError>({
        ...options,
        url: '/editor/insert'
    });
};

/**
 * Undo the last edit
 * Currently not implemented.
 */
export const editorUndoLastEdit = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditorUndoLastEditData, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/editor/undo-edit'
    });
};

/**
 * Execute Bash Command
 * Executes a given bash command and returns the output. If the command runs longer than 15 seconds, it will be moved to background and return a process ID.
 */
export const bashExecuteCommand = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BashExecuteCommandData, ThrowOnError>) => {
    return (options?.client ?? client).post<BashExecuteCommandResponse, BashExecuteCommandError, ThrowOnError>({
        ...options,
        url: '/bash/command'
    });
};

/**
 * Get Process Output
 * Gets the output of a background process by its PID.
 */
export const bashGetProcessOutput = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BashGetProcessOutputData, ThrowOnError>) => {
    return (options?.client ?? client).get<BashGetProcessOutputResponse, BashGetProcessOutputError, ThrowOnError>({
        ...options,
        url: '/bash/process/{pid}/output'
    });
};

/**
 * Terminate Process
 * Terminates a background process by its PID.
 */
export const bashTerminateProcess = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BashTerminateProcessData, ThrowOnError>) => {
    return (options?.client ?? client).delete<BashTerminateProcessResponse, BashTerminateProcessError, ThrowOnError>({
        ...options,
        url: '/bash/process/{pid}'
    });
};

/**
 * List Managed Processes
 * Lists all background processes managed by the API.
 */
export const bashListManagedProcesses = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<BashListManagedProcessesResponse, BashListManagedProcessesError, ThrowOnError>({
        ...options,
        url: '/bash/processes/managed'
    });
};

/**
 * List System Processes
 * Lists all running processes on the system.
 */
export const bashListSystemProcesses = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<BashListSystemProcessesResponse, BashListSystemProcessesError, ThrowOnError>({
        ...options,
        url: '/bash/processes/system'
    });
};

/**
 * Restart System
 * Restarts the system.
 */
export const bashRestartSystem = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BashRestartSystemData, ThrowOnError>) => {
    return (options?.client ?? client).post<BashRestartSystemResponse, BashRestartSystemError, ThrowOnError>({
        ...options,
        url: '/bash/restart'
    });
};