// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { MoveMouseData, MoveMouseError, MoveMouseResponse, LeftClickData, LeftClickError, LeftClickResponse, RightClickData, RightClickError, RightClickResponse, MiddleClickData, MiddleClickError, MiddleClickResponse, DoubleClickData, DoubleClickError, DoubleClickResponse, DragMouseData, DragMouseError, DragMouseResponse, GetMousePositionData, GetMousePositionError, GetMousePositionResponse, ScrollMouseData, ScrollMouseError, ScrollMouseResponse, PressKeyData, PressKeyError, PressKeyResponse, TypeTextData, TypeTextError, TypeTextResponse, PressHotkeyData, PressHotkeyError, PressHotkeyResponse, HoldKeyData, HoldKeyError, HoldKeyResponse, ReleaseKeyData, ReleaseKeyError, ReleaseKeyResponse, TakeScreenshotData, TakeScreenshotError, TakeScreenshotResponse, GetScreenSizeData, GetScreenSizeError, GetScreenSizeResponse, LocateImageData, LocateImageError, LocateImageResponse, GetPixelColorData, GetPixelColorError, GetPixelColorResponse, ExecuteCommandData, ExecuteCommandError, ExecuteCommandResponse, GetProcessOutputData, GetProcessOutputError, GetProcessOutputResponse, TerminateProcessData, TerminateProcessError, TerminateProcessResponse, RestartSystemData, RestartSystemError, RestartSystemResponse, ListManagedProcessesError, ListManagedProcessesResponse, ViewFileData, ViewFileError, ViewFileResponse, CreateFileData, CreateFileError, CreateFileResponse, ReplaceStringData, ReplaceStringError, ReplaceStringResponse, InsertTextData, InsertTextError, InsertTextResponse, UndoEditData, UndoEditError, UndoEditResponse, SetKeychainItemData, SetKeychainItemError, SetKeychainItemResponse, DeleteKeychainItemData, DeleteKeychainItemError, DeleteKeychainItemResponse, ListKeychainServicesError, ListKeychainServicesResponse, AuthenticateServiceData, AuthenticateServiceError, AuthenticateServiceResponse, ListDirectoryData, ListDirectoryError, ListDirectoryResponse, GetDirectoryTreeData, GetDirectoryTreeError, GetDirectoryTreeResponse, SearchFilesData, SearchFilesError, SearchFilesResponse, GetPathInfoData, GetPathInfoError, GetPathInfoResponse, RootGetError, RootGetResponse, ApiRootApiGetError, ApiRootApiGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Move Mouse Cursor
 * Moves the mouse cursor to the specified X and Y coordinates on the screen.
 */
export const moveMouse = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<MoveMouseData, ThrowOnError>) => {
    return (options?.client ?? client).post<MoveMouseResponse, MoveMouseError, ThrowOnError>({
        ...options,
        url: '/api/mouse/move'
    });
};

/**
 * Perform Left Click
 * Performs a left mouse button click at the current cursor position.
 */
export const leftClick = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LeftClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<LeftClickResponse, LeftClickError, ThrowOnError>({
        ...options,
        url: '/api/mouse/left-click'
    });
};

/**
 * Perform Right Click
 * Performs a right mouse button click at the current cursor position.
 */
export const rightClick = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RightClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<RightClickResponse, RightClickError, ThrowOnError>({
        ...options,
        url: '/api/mouse/right-click'
    });
};

/**
 * Perform Middle Click
 * Performs a middle mouse button (scroll wheel) click at the current cursor position.
 */
export const middleClick = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<MiddleClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<MiddleClickResponse, MiddleClickError, ThrowOnError>({
        ...options,
        url: '/api/mouse/middle-click'
    });
};

/**
 * Perform Double Click
 * Performs a double left click at the current cursor position.
 */
export const doubleClick = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DoubleClickData, ThrowOnError>) => {
    return (options?.client ?? client).post<DoubleClickResponse, DoubleClickError, ThrowOnError>({
        ...options,
        url: '/api/mouse/double-click'
    });
};

/**
 * Drag Mouse
 * Performs a drag operation from the current cursor position to the specified coordinates.
 */
export const dragMouse = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DragMouseData, ThrowOnError>) => {
    return (options?.client ?? client).post<DragMouseResponse, DragMouseError, ThrowOnError>({
        ...options,
        url: '/api/mouse/drag'
    });
};

/**
 * Get Cursor Position
 * Gets the current position of the mouse cursor on the screen.
 */
export const getMousePosition = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetMousePositionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMousePositionResponse, GetMousePositionError, ThrowOnError>({
        ...options,
        url: '/api/mouse/position'
    });
};

/**
 * Scroll Mouse Wheel
 * Scrolls the mouse wheel by the specified number of clicks.
 */
export const scrollMouse = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ScrollMouseData, ThrowOnError>) => {
    return (options?.client ?? client).post<ScrollMouseResponse, ScrollMouseError, ThrowOnError>({
        ...options,
        url: '/api/mouse/scroll'
    });
};

/**
 * Press Key
 * Presses a single keyboard key.
 */
export const pressKey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PressKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PressKeyResponse, PressKeyError, ThrowOnError>({
        ...options,
        url: '/api/keyboard/key'
    });
};

/**
 * Type Text
 * Types a sequence of text with configurable speed and grouping.
 */
export const typeText = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TypeTextData, ThrowOnError>) => {
    return (options?.client ?? client).post<TypeTextResponse, TypeTextError, ThrowOnError>({
        ...options,
        url: '/api/keyboard/type'
    });
};

/**
 * Press Hotkey Combination
 * Presses multiple keys simultaneously to perform a hotkey combination.
 */
export const pressHotkey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PressHotkeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PressHotkeyResponse, PressHotkeyError, ThrowOnError>({
        ...options,
        url: '/api/keyboard/hotkey'
    });
};

/**
 * Hold Key
 * Holds down a keyboard key without releasing it.
 */
export const holdKey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<HoldKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<HoldKeyResponse, HoldKeyError, ThrowOnError>({
        ...options,
        url: '/api/keyboard/hold'
    });
};

/**
 * Release Key
 * Releases a previously held keyboard key.
 */
export const releaseKey = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReleaseKeyData, ThrowOnError>) => {
    return (options?.client ?? client).post<ReleaseKeyResponse, ReleaseKeyError, ThrowOnError>({
        ...options,
        url: '/api/keyboard/release'
    });
};

/**
 * Take Screenshot
 * Captures a screenshot of the specified display.
 */
export const takeScreenshot = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TakeScreenshotData, ThrowOnError>) => {
    return (options?.client ?? client).get<TakeScreenshotResponse, TakeScreenshotError, ThrowOnError>({
        ...options,
        url: '/api/display/screenshot'
    });
};

/**
 * Get Screen Size
 * Retrieves the dimensions of the specified display.
 */
export const getScreenSize = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetScreenSizeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScreenSizeResponse, GetScreenSizeError, ThrowOnError>({
        ...options,
        url: '/api/display/screen_size'
    });
};

/**
 * Locate Image on Screen
 * Searches for a specified image on the screen and returns its location if found.
 */
export const locateImage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LocateImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<LocateImageResponse, LocateImageError, ThrowOnError>({
        ...options,
        url: '/api/display/locate'
    });
};

/**
 * Get Pixel Color
 * Retrieves the RGB color values of a pixel at the specified coordinates.
 */
export const getPixelColor = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPixelColorData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetPixelColorResponse, GetPixelColorError, ThrowOnError>({
        ...options,
        url: '/api/display/pixel_color'
    });
};

/**
 * Execute Shell Command
 * Executes a shell command and returns its output or background process information.
 */
export const executeCommand = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ExecuteCommandData, ThrowOnError>) => {
    return (options?.client ?? client).post<ExecuteCommandResponse, ExecuteCommandError, ThrowOnError>({
        ...options,
        url: '/api/bash/command'
    });
};

/**
 * Get Process Output
 * Retrieves the output of a background process by its ID.
 */
export const getProcessOutput = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProcessOutputData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProcessOutputResponse, GetProcessOutputError, ThrowOnError>({
        ...options,
        url: '/api/bash/process/{pid}/output'
    });
};

/**
 * Terminate Process
 * Terminates a background process by its ID.
 */
export const terminateProcess = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TerminateProcessData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TerminateProcessResponse, TerminateProcessError, ThrowOnError>({
        ...options,
        url: '/api/bash/process/{pid}'
    });
};

/**
 * Restart System
 * Restarts the system services.
 */
export const restartSystem = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RestartSystemData, ThrowOnError>) => {
    return (options?.client ?? client).post<RestartSystemResponse, RestartSystemError, ThrowOnError>({
        ...options,
        url: '/api/bash/restart'
    });
};

/**
 * List Managed Processes
 * Lists all background processes managed by the system.
 */
export const listManagedProcesses = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListManagedProcessesResponse, ListManagedProcessesError, ThrowOnError>({
        ...options,
        url: '/api/bash/processes/managed'
    });
};

/**
 * View File Contents
 * Retrieves the contents of a file, optionally within a specified line range.
 */
export const viewFile = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ViewFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<ViewFileResponse, ViewFileError, ThrowOnError>({
        ...options,
        url: '/api/editor/view'
    });
};

/**
 * Create New File
 * Creates a new file with optional initial content.
 */
export const createFile = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateFileData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateFileResponse, CreateFileError, ThrowOnError>({
        ...options,
        url: '/api/editor/create'
    });
};

/**
 * Replace String
 * Replaces all occurrences of a string in a file with a new string.
 */
export const replaceString = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReplaceStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<ReplaceStringResponse, ReplaceStringError, ThrowOnError>({
        ...options,
        url: '/api/editor/str-replace'
    });
};

/**
 * Insert Text
 * Inserts text at a specified line number in a file.
 */
export const insertText = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<InsertTextData, ThrowOnError>) => {
    return (options?.client ?? client).post<InsertTextResponse, InsertTextError, ThrowOnError>({
        ...options,
        url: '/api/editor/insert'
    });
};

/**
 * Undo Last Edit
 * Reverts the last edit made to a file.
 */
export const undoEdit = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UndoEditData, ThrowOnError>) => {
    return (options?.client ?? client).post<UndoEditResponse, UndoEditError, ThrowOnError>({
        ...options,
        url: '/api/editor/undo-edit'
    });
};

/**
 * Store Keychain Item
 * Stores a new keychain item for a service.
 */
export const setKeychainItem = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SetKeychainItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetKeychainItemResponse, SetKeychainItemError, ThrowOnError>({
        ...options,
        url: '/api/keychain/set-item'
    });
};

/**
 * Delete Keychain Item
 * Deletes a keychain item for a service.
 */
export const deleteKeychainItem = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteKeychainItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteKeychainItemResponse, DeleteKeychainItemError, ThrowOnError>({
        ...options,
        url: '/api/keychain/delete-item'
    });
};

/**
 * List Services
 * Lists all services with stored keychain items.
 */
export const listKeychainServices = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListKeychainServicesResponse, ListKeychainServicesError, ThrowOnError>({
        ...options,
        url: '/api/keychain/list-services'
    });
};

/**
 * Authenticate Service
 * Verifies authentication elements against stored keychain item.
 */
export const authenticateService = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AuthenticateServiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthenticateServiceResponse, AuthenticateServiceError, ThrowOnError>({
        ...options,
        url: '/api/keychain/authenticate'
    });
};

/**
 * List Directory Contents
 * Lists the contents of a directory with optional filtering.
 */
export const listDirectory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListDirectoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListDirectoryResponse, ListDirectoryError, ThrowOnError>({
        ...options,
        url: '/api/filesystem/list'
    });
};

/**
 * Get Directory Tree
 * Generates a tree representation of a directory structure.
 */
export const getDirectoryTree = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetDirectoryTreeData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetDirectoryTreeResponse, GetDirectoryTreeError, ThrowOnError>({
        ...options,
        url: '/api/filesystem/tree'
    });
};

/**
 * Search Files
 * Searches for files matching a pattern in a directory tree.
 */
export const searchFiles = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SearchFilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<SearchFilesResponse, SearchFilesError, ThrowOnError>({
        ...options,
        url: '/api/filesystem/search'
    });
};

/**
 * Get Path Info
 * Gets detailed information about a file or directory.
 */
export const getPathInfo = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPathInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPathInfoResponse, GetPathInfoError, ThrowOnError>({
        ...options,
        url: '/api/filesystem/info/{path}'
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponse, RootGetError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * Api Root
 */
export const apiRootApiGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiRootApiGetResponse, ApiRootApiGetError, ThrowOnError>({
        ...options,
        url: '/api'
    });
};